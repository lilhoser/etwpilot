<Fluent:RibbonWindow x:Class="EtwPilot.MainWindow"
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                     xmlns:vm="clr-namespace:EtwPilot.ViewModel"
                     xmlns:view="clr-namespace:EtwPilot.View"
                     xmlns:utils="clr-namespace:EtwPilot.Utilities"
                     xmlns:Fluent="urn:fluent-ribbon"
                     xmlns:behaviours="http://schemas.microsoft.com/xaml/behaviors"
                     Title="ETW Pilot" 
                     mc:Ignorable="d"
                     Name="MainRibbonWindow"
                     Icon="{DynamicResource logo}"
                     DataContext="{Binding Source={x:Static vm:GlobalStateViewModel.Instance}}"
                     Height="900" Width="1500">
    <!-- Use the interactions feature to redirect some UI events to commands -->
    <behaviours:Interaction.Triggers>
        <behaviours:EventTrigger EventName="Loaded">
            <behaviours:InvokeCommandAction 
               Command="{Binding g_MainWindowViewModel.WindowLoadedCommand}"
               PassEventArgsToCommand="True"/>
        </behaviours:EventTrigger>
    </behaviours:Interaction.Triggers>
    <Fluent:RibbonWindow.Resources>
        <!-- Instantiate first-level views as resources so they're not
             recreated every time tabs are switched - see:
                https://stackoverflow.com/questions/38468786/mvvm-datatemplate-creates-a-new-view
        
            This is only done for views where content should never change once loaded, because
            having to reload content on subsequent reuses would create an undesirable coupling
            between viewmodels and their views.-->
        <view:ProviderView x:Key="StaticProviderView"/>
        <view:ProviderManifestView x:Key="StaticProviderManifestView"/>
        <view:SessionView x:Key="StaticSessionView"/>
        <view:SettingsFormView x:Key="StaticSettingsFormView"/>
        <view:InsightsView x:Key="StaticInsightsView"/>
        
        <!-- DataTemplates for current content view model -->
        <DataTemplate DataType="{x:Type vm:ProviderViewModel}">
            <ContentControl Content="{StaticResource StaticProviderView}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:ProviderManifestViewModel}">
            <ContentControl Content="{StaticResource StaticProviderManifestView}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:SessionViewModel}">
            <ContentControl Content="{StaticResource StaticSessionView}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:SettingsFormViewModel}">
            <ContentControl Content="{StaticResource StaticSettingsFormView}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:LiveSessionViewModel}">
            <view:LiveSessionView />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:InsightsViewModel}">
            <ContentControl Content="{StaticResource StaticInsightsView}" />
        </DataTemplate>
    </Fluent:RibbonWindow.Resources>
    <DockPanel>
        <Fluent:Ribbon VerticalAlignment="Top"
                       IsDisplayOptionsButtonVisible="False"
                       Name="MainWindowRibbon"
                       CanMinimize="False"
                       DockPanel.Dock="Top"
                       SelectedTabIndex="{Binding g_MainWindowViewModel.RibbonTabControlSelectedIndex,Mode=TwoWay}">
            <Fluent:Ribbon.Resources>
                <!-- Template for dynamic contextual tabs. Some properties are set in code-behind. -->
                <Style x:Key="ProviderContextTabStyle" TargetType="{x:Type Fluent:RibbonTabItem}">
                    <Setter Property="Group" Value="{Binding Source={x:Reference manifestsContextualTabGroup}}"/>
                    <Setter Property="Visibility" Value="{Binding g_MainWindowViewModel,ValidatesOnNotifyDataErrors=False}"/>
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Name="ProviderContextTabText"/>
                                    <Separator Width="5"/>
                                    <Button Name="ProviderContextTabCloseButton"
                                            Content="{StaticResource red_x_close}"
                                            BorderThickness="0"
                                            Margin="0"
                                            Padding="0"
                                            Background="Transparent"/>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style x:Key="SessionContextTabStyle" TargetType="{x:Type Fluent:RibbonTabItem}">
                    <Setter Property="Group" Value="{Binding Source={x:Reference sessionsContextualTabGroup}}"/>
                    <Setter Property="Visibility" Value="{Binding g_MainWindowViewModel.LiveSessionsVisible,ValidatesOnNotifyDataErrors=False}"/>
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Name="SessionContextTabText"/>
                                    <Separator Width="5"/>
                                    <Button Name="SessionContextTabCloseButton"
                                            Content="{StaticResource red_x_close}"
                                            BorderThickness="0"
                                            Margin="0"
                                            Padding="0"
                                            Background="Transparent"/>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Fluent:Ribbon.Resources>
            <behaviours:Interaction.Triggers>
                <behaviours:EventTrigger EventName="SelectedTabChanged">
                    <behaviours:InvokeCommandAction 
                       Command="{Binding g_MainWindowViewModel.TabSelectionChangedCommand}"
                       PassEventArgsToCommand="True"/>
                </behaviours:EventTrigger>
            </behaviours:Interaction.Triggers>

            <!--Backstage-->
            <Fluent:Ribbon.Menu>
                <Fluent:Backstage IsOpenChanged="Backstage_IsOpenChanged">
                    <Fluent:BackstageTabControl>
                        <Fluent:BackstageTabItem Header="Settings" Name="MainContentMenuItem">
                            <ContentControl Content="{Binding Settings, ValidatesOnNotifyDataErrors=False}"/>
                        </Fluent:BackstageTabItem>
                        <Fluent:Button Header="Load settings"
                                       Command="{Binding Settings.LoadSettingsCommand}" />
                        <Fluent:Button Header="Save settings"
                                       Command="{Binding Settings.SaveSettingsCommand}" />
                        <Fluent:Button Header="Show debug logs"
                                       Command="{Binding g_MainWindowViewModel.ShowDebugLogsCommand}" />
                        <Fluent:Button Header="Exit"
                                       Command="{Binding g_MainWindowViewModel.ExitCommand}" />
                    </Fluent:BackstageTabControl>
                </Fluent:Backstage>
            </Fluent:Ribbon.Menu>

            <!--Tabs-->
            <Fluent:RibbonTabItem Header="Providers" Name="ProvidersTab" IsSelected="True">
                <Fluent:RibbonGroupBox Header="Actions" Width="100">
                    <Fluent:Button Header="Refresh"
                                   Icon="{DynamicResource refresh}"
                                   DataContext="{Binding g_ProviderViewModel}"
                                   Command="{Binding LoadProvidersCommand}"/>
                    <Fluent:Button Header="New"
                                   Icon="{DynamicResource session}"
                                   DataContext="{Binding g_SessionFormViewModel}"
                                   Command="{Binding NewSessionFromProviderCommand}"/>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Export" Width="Auto" DataContext="{Binding g_ProviderViewModel}">
                    <Fluent:Button Header="JSON"
                                   Icon="{DynamicResource json}"
                                   Command="{Binding ExportDataCommand}"
                                   CommandParameter="{x:Static utils:DataExporter+ExportFormat.Json}"/>
                    <Fluent:Button Header="CSV"
                                   Icon="{DynamicResource csv}"
                                   Command="{Binding ExportDataCommand}"
                                   CommandParameter="{x:Static utils:DataExporter+ExportFormat.Csv}"/>
                    <Fluent:Button Header="XML"
                                   Icon="{DynamicResource xml}"
                                   Command="{Binding ExportDataCommand}"
                                   CommandParameter="{x:Static utils:DataExporter+ExportFormat.Xml}"/>
                    <Fluent:GroupSeparatorMenuItem Height="50" Width="2" />
                    <Fluent:Button Header="Clip"
                                   Icon="{DynamicResource clipboard}"
                                   Command="{Binding ExportDataCommand}"
                                   CommandParameter="{x:Static utils:DataExporter+ExportFormat.Clip}"/>
                    <Fluent:GroupSeparatorMenuItem Height="50" Width="2" />
                    <Fluent:Button Header="Manifest"
                                   Icon="{DynamicResource export}"
                                   Command="{Binding DumpProviderManifestsCommand}"/>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>
            <Fluent:RibbonTabItem Header="Sessions" Name="SessionsTab"
                                  DataContext="{Binding g_SessionViewModel}">
                <Fluent:RibbonGroupBox Header="Actions" Width="75">
                    <Fluent:Button Header="Refresh"
                                   Icon="{DynamicResource refresh}"
                                   Command="{Binding LoadSessionsCommand}"/>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Export" Width="Auto">
                    <Fluent:Button Header="JSON"
                                   Icon="{DynamicResource json}"
                                   Command="{Binding ExportDataCommand}"
                                   CommandParameter="{x:Static utils:DataExporter+ExportFormat.Json}"/>
                    <Fluent:Button Header="CSV"
                                   Icon="{DynamicResource csv}"
                                   Command="{Binding ExportDataCommand}"
                                   CommandParameter="{x:Static utils:DataExporter+ExportFormat.Csv}"/>
                    <Fluent:Button Header="XML"
                                   Icon="{DynamicResource xml}"
                                   Command="{Binding ExportDataCommand}"
                                   CommandParameter="{x:Static utils:DataExporter+ExportFormat.Xml}"/>
                    <Fluent:GroupSeparatorMenuItem Height="50" Width="2" />
                    <Fluent:Button Header="Clip"
                                   Icon="{DynamicResource clipboard}"
                                   Command="{Binding ExportDataCommand}"
                                   CommandParameter="{x:Static utils:DataExporter+ExportFormat.Clip}"/>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Control">
                    <Fluent:Button Header="New"
                                   Icon="{DynamicResource plus}"
                                   Command="{Binding NewSessionCommand}"/>
                    <Fluent:Button Header="Start"
                                   Icon="{DynamicResource start}"
                                   Command="{Binding StartSessionCommand}"/>
                    <Fluent:Button Header="Stop All"
                                   Icon="{DynamicResource stop}"
                                   Command="{Binding StopAllSessionsCommand}"/>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Tools">
                    <Fluent:Button Header="Preview"
                                   Icon="{DynamicResource bulletlist}"
                                   DataContext="{Binding Source={x:Static vm:GlobalStateViewModel.Instance}}"
                                   Command="{Binding g_SessionFormViewModel.ShowFormPreviewCommand}"/>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>
            <Fluent:RibbonTabItem Header="Insights" 
                                  Name="InsightsTab"
                                  DataContext="{Binding g_InsightsViewModel,ValidatesOnNotifyDataErrors=False}">
                <Fluent:RibbonGroupBox Header="Actions" Width="Auto">
                    <Fluent:Button Header="Reinitialize"
                                   Icon="{DynamicResource refresh}"
                                   Command="{Binding ReinitializeCommand,ValidatesOnNotifyDataErrors=False}"/>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Topic" Width="Auto">
                    <Fluent:ToggleButton Header="General"
                        Name="GeneralToggleButton"
                        Icon="{DynamicResource user-avatar}"
                        GroupName="TopicGroup"
                        IsChecked="{Binding Topic,Converter={StaticResource ChatTopicToBool}, ConverterParameter=General,ValidatesOnNotifyDataErrors=False}"
                        Command="{Binding SetChatTopicCommand,ValidatesOnNotifyDataErrors=False}"
                        CommandParameter="{x:Static vm:InsightsViewModel+ChatTopic.General}"/>
                    <Fluent:ToggleButton Header="Manifests"
                        Name="ManifestsToggleButton"
                        Icon="{DynamicResource provdb}"
                        GroupName="TopicGroup"
                        IsChecked="{Binding Topic,Converter={StaticResource ChatTopicToBool}, ConverterParameter=Manifests,ValidatesOnNotifyDataErrors=False}"
                        Command="{Binding SetChatTopicCommand,ValidatesOnNotifyDataErrors=False}"
                        CommandParameter="{x:Static vm:InsightsViewModel+ChatTopic.Manifests}"/>
                    <Fluent:ToggleButton Header="Data"
                        Name="DataToggleButton"
                        Icon="{DynamicResource datadb}"
                        GroupName="TopicGroup"
                        IsChecked="{Binding Topic,Converter={StaticResource ChatTopicToBool}, ConverterParameter=Data,ValidatesOnNotifyDataErrors=False}"
                        Command="{Binding SetChatTopicCommand,ValidatesOnNotifyDataErrors=False}"
                        CommandParameter="{x:Static vm:InsightsViewModel+ChatTopic.EventData}"/>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Model Input" Width="Auto">
                    <Fluent:DropDownButton Header="Import"
                        Width="Auto"
                        Icon="{DynamicResource plus}"
                        IsEnabled="{Binding VecDbCommandsAllowed,ValidatesOnNotifyDataErrors=False}">
                        <Fluent:Button
                            Header="From XML file..."
                            Width="Auto"
                            Command="{Binding ImportVectorDbDataCommand,ValidatesOnNotifyDataErrors=False}"
                            CommandParameter="{x:Static vm:InsightsViewModel+DataSource.XMLFile}"/>
                        <Fluent:Button
                            Header="From JSON file..."
                            Width="Auto"
                            Command="{Binding ImportVectorDbDataCommand,ValidatesOnNotifyDataErrors=False}"
                            CommandParameter="{x:Static vm:InsightsViewModel+DataSource.JSONFile}"/>
                        <Fluent:Button
                            Header="Live..."
                            Width="Auto"
                            Command="{Binding ImportVectorDbDataCommand,ValidatesOnNotifyDataErrors=False}"
                            CommandParameter="{x:Static vm:InsightsViewModel+DataSource.Live}"/>
                    </Fluent:DropDownButton>
                    <Fluent:Button
                        Header="Restore"
                        Width="Auto"
                        Icon="{DynamicResource open}"
                        Command="{Binding RestoreVectorDbCollectionCommand,ValidatesOnNotifyDataErrors=False}"/>
                    <Fluent:Button
                        Header="Save"
                        Width="Auto"
                        Icon="{DynamicResource diskette}"
                        Command="{Binding SaveVectorDbCollectionCommand,ValidatesOnNotifyDataErrors=False}"/>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>

            <!--Contextual Tab Groups-->
            <Fluent:Ribbon.ContextualGroups>
                <Fluent:RibbonContextualTabGroup 
                    Name="manifestsContextualTabGroup"
                    Header="Provider Manifests" 
                    Visibility="{Binding g_MainWindowViewModel.ProviderManifestVisible,Mode=TwoWay}"
                    Background="Green" 
                    Width="Auto"
                    MinWidth="125"
                    BorderBrush="Green"/>
                <Fluent:RibbonContextualTabGroup
                    Name="sessionsContextualTabGroup"
                    Header="Live Trace Sessions" 
                    Width="Auto"
                    HorizontalAlignment="Left"
                    Visibility="{Binding g_MainWindowViewModel.LiveSessionsVisible,Mode=TwoWay}"
                    Background="Red" 
                    BorderBrush="Red"/>
            </Fluent:Ribbon.ContextualGroups>

        </Fluent:Ribbon>

        <StatusBar Name="MainWindowStatusBar"
                   Background="DodgerBlue"
                   DockPanel.Dock="Bottom"
                   DataContext="{Binding CurrentViewModel}">
            <StatusBarItem HorizontalAlignment="Left">
                <ProgressBar DockPanel.Dock="Left"
                        Minimum="0"
                        Maximum="{Binding ProgressState.ProgressMax}"
                        Value="{Binding ProgressState.ProgressValue}"
                        VerticalAlignment="Top"
                        HorizontalAlignment="Left"
                        Visibility="{Binding ProgressState.Visible}"
                        Width="125"
                        Height="20"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Left">
                <Button DockPanel.Dock="Left"
                        Background="Gray"
                        BorderBrush="White"
                        BorderThickness="2"
                        Content="Cancel"
                        Name="CancelCurrentCommandButton"
                        Command="{Binding CancelCurrentCommandCommand}"                      
                        HorizontalAlignment="Left"
                        FontSize="10"
                        VerticalAlignment="Top"
                        Visibility="{Binding CancelCommandButtonVisibility}"
                        Height="20"/>
            </StatusBarItem>
            <StatusBarItem>
                <Fluent:GroupSeparatorMenuItem DockPanel.Dock="Left"
                        Width="2"
                        Height="25"
                        Background="Black"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Stretch">
                <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center">
                    <Run Text="{Binding ProgressState.StatusText}"
                         Foreground="White"/>
                </TextBlock>
            </StatusBarItem>
        </StatusBar>
        <ContentControl Name="MainContentControl"
                        Content="{Binding CurrentViewModel,ValidatesOnNotifyDataErrors=False}"/>
    </DockPanel>
</Fluent:RibbonWindow>
