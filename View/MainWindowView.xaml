<Fluent:RibbonWindow x:Class="EtwPilot.MainWindow"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:vm="clr-namespace:EtwPilot.ViewModel"
                    xmlns:view="clr-namespace:EtwPilot.View"
                    xmlns:utils="clr-namespace:EtwPilot.Utilities"
                    xmlns:Fluent="urn:fluent-ribbon"
                    xmlns:behaviours="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:controls="clr-namespace:EtwPilot.Controls"
                    Title="ETW Pilot" 
                    mc:Ignorable="d"
                    Name="MainRibbonWindow"
                    Icon="{DynamicResource logo}"
                    DataContext="{Binding Source={x:Static vm:GlobalStateViewModel.Instance}}"
                    Height="900" Width="1500"
                    Loaded="MainRibbonWindow_Loaded">
    <!-- Use the interactions feature to redirect some UI events to commands -->
    <behaviours:Interaction.Triggers>
        <behaviours:EventTrigger EventName="Loaded">
            <behaviours:InvokeCommandAction 
               Command="{Binding g_MainWindowViewModel.WindowLoadedCommand}"
               PassEventArgsToCommand="True"/>
        </behaviours:EventTrigger>
    </behaviours:Interaction.Triggers>
    <Fluent:RibbonWindow.Resources>
        <!-- Views on tab pages are recreated every-time the tab page is switched. This
        is fine for simple views whose UI controls are all statically defined in XAML but for
        those that are dynamically created (such as tab items or datagrid columns) this is
        a royal PITA and even a big perf hit. For such views, we instantiate a single, static
        view here and reference it for any viewmodel of that type being activated in the
        visual tree.
        
        See https://stackoverflow.com/questions/38468786/mvvm-datatemplate-creates-a-new-view
         -->
        <view:ProviderView x:Key="StaticProviderView"/>
        <view:SessionView x:Key="StaticSessionView"/>
        <view:SettingsFormView x:Key="StaticSettingsFormView"/>
        <view:InsightsView x:Key="StaticInsightsView"/>
        <view:LiveSessionView x:Key="StaticLiveSessionView"/>
        
        <!-- DataTemplates for current content view model -->
        <DataTemplate DataType="{x:Type vm:ProviderViewModel}">
            <ContentControl Content="{StaticResource StaticProviderView}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:ProviderManifestViewModel}">
            <view:ProviderManifestView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:SessionViewModel}">
            <ContentControl Content="{StaticResource StaticSessionView}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:SettingsFormViewModel}">
            <ContentControl Content="{StaticResource StaticSettingsFormView}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:LiveSessionViewModel}">
            <ContentControl Content="{StaticResource StaticLiveSessionView}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:InsightsViewModel}">
            <ContentControl Content="{StaticResource StaticInsightsView}" />
        </DataTemplate>
    </Fluent:RibbonWindow.Resources>
    <Grid>
    <DockPanel>
        <!-- main content -->
        <Fluent:Ribbon VerticalAlignment="Top"
                       IsDisplayOptionsButtonVisible="False"
                       Name="MainWindowRibbon"
                       CanMinimize="False"
                       DockPanel.Dock="Top"
                       SelectedTabIndex="{Binding g_MainWindowViewModel.RibbonTabControlSelectedIndex,Mode=TwoWay}">
            <Fluent:Ribbon.Resources>
                <!-- HeaderTemplate for TabItem and RibbonTabItem - shows the tab title and a "X" close button -->
                <Style x:Key="DynamicContextualRibbonTabItemHeaderStyle" TargetType="{x:Type Fluent:RibbonTabItem}">
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=Fluent:RibbonTabItem,AncestorLevel=1},
                             Path=DataContext.m_TabText,ValidatesOnNotifyDataErrors=False}"/>
                                    <Separator Width="5"/>
                                    <Button Content="{StaticResource red_x_close}"
                                            BorderThickness="0"
                                            Margin="0"
                                            Padding="0"
                                            Background="Transparent"
                                            Command="{Binding Source={x:Static vm:GlobalStateViewModel.Instance},Path=g_MainWindowViewModel.CloseDynamicTab,ValidatesOnNotifyDataErrors=False}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Fluent:RibbonTabItem,AncestorLevel=1},
                             Path=DataContext,ValidatesOnNotifyDataErrors=False}"/>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style x:Key="DynamicTabItemHeaderStyle" TargetType="{x:Type TabItem}">
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=TabItem,AncestorLevel=1},
                             Path=DataContext.m_TabText,ValidatesOnNotifyDataErrors=False}"/>
                                    <Separator Width="5"/>
                                    <Button Content="{StaticResource red_x_close}"
                                            BorderThickness="0"
                                            Margin="0"
                                            Padding="0"
                                            Background="Transparent"
                                            Command="{Binding Source={x:Static vm:GlobalStateViewModel.Instance},Path=g_MainWindowViewModel.CloseDynamicTab,ValidatesOnNotifyDataErrors=False}"
                                            CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=TabItem,AncestorLevel=1},
                             Path=DataContext,ValidatesOnNotifyDataErrors=False}"/>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style x:Key="DynamicTabItemNoCloseButtonHeaderStyle" TargetType="{x:Type TabItem}">
                    <Setter Property="HeaderTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=TabItem,AncestorLevel=1},
                             Path=DataContext.m_TabText,ValidatesOnNotifyDataErrors=False}"/>
                                </StackPanel>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <!-- Fluent Ribbon groupbox buttons that are added to Fluent Context Tabs for LiveSessions -->
                <Style x:Key="LiveSessionStopButtonStyle" TargetType="{x:Type Fluent:Button}">
                    <Setter Property="Icon" Value="{DynamicResource stop}" />
                    <Setter Property="Command" Value="{Binding StopCommand}" />
                    <Setter Property="Header" Value="Stop" />
                </Style>
                <Style x:Key="LiveSessionInsightsButtonStyle" TargetType="{x:Type Fluent:Button}">
                    <Setter Property="Icon" Value="{DynamicResource lightbulb}" />
                    <Setter Property="Command" Value="{Binding SendToInsightsCommand}" />
                    <Setter Property="Header" Value="Insights" />
                </Style>
            </Fluent:Ribbon.Resources>
            <behaviours:Interaction.Triggers>
                <behaviours:EventTrigger EventName="SelectedTabChanged">
                    <behaviours:InvokeCommandAction 
                       Command="{Binding g_MainWindowViewModel.TabSelectionChangedCommand}"
                       PassEventArgsToCommand="True"/>
                </behaviours:EventTrigger>
            </behaviours:Interaction.Triggers>

            <!--Backstage-->
            <Fluent:Ribbon.Menu>
                <Fluent:Backstage IsOpenChanged="Backstage_IsOpenChanged">
                    <Fluent:BackstageTabControl>
                        <Fluent:BackstageTabItem Header="Settings" Name="MainContentMenuItem">
                            <ContentControl Content="{Binding Settings, ValidatesOnNotifyDataErrors=False}"/>
                        </Fluent:BackstageTabItem>
                        <Fluent:Button Header="Load settings"
                                       Command="{Binding Settings.LoadSettingsCommand}" />
                        <Fluent:Button Header="Save settings"
                                       Command="{Binding Settings.SaveSettingsCommand}" />
                        <Fluent:Button Header="Show debug logs"
                                       Command="{Binding g_MainWindowViewModel.ShowDebugLogsCommand}" />
                        <Fluent:Button Header="Exit"
                                       Command="{Binding g_MainWindowViewModel.ExitCommand}" />
                    </Fluent:BackstageTabControl>
                </Fluent:Backstage>
            </Fluent:Ribbon.Menu>

            <!--Tabs-->
            <Fluent:RibbonTabItem Header="Providers" Name="ProvidersTab" >
                <Fluent:RibbonGroupBox Header="Actions"
                                       Width="Auto"
                                       Height="Auto"
                                       VerticalAlignment="Top">
                    <Fluent:Button Header="Refresh"
                                   Icon="{DynamicResource refresh}"
                                   Command="{Binding g_ProviderViewModel.LoadProvidersCommand}"/>
                    <Fluent:Button Header="New"
                                   Icon="{DynamicResource session}"
                                   Command="{Binding g_SessionFormViewModel.NewSessionFromProviderCommand}"/>
                </Fluent:RibbonGroupBox>
                <controls:ExportButtonGroup/>
                <Fluent:RibbonGroupBox Header="Manifests"
                                       Width="Auto"
                                       Height="Auto"
                                       VerticalAlignment="Top">
                    <Fluent:Button Header="Dump"
                                   Icon="{DynamicResource export}"
                                   Command="{Binding g_ProviderViewModel.DumpProviderManifestsCommand}"/>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>
            <Fluent:RibbonTabItem Header="Sessions"  Name="SessionsTab">
                <Fluent:RibbonGroupBox Header="Actions"
                                       Width="Auto"
                                       Height="Auto"
                                       VerticalAlignment="Top">
                    <Fluent:Button Header="Refresh"
                                   Icon="{DynamicResource refresh}"
                                   Command="{Binding g_SessionViewModel.LoadSessionsCommand}"/>
                </Fluent:RibbonGroupBox>
                <controls:ExportButtonGroup/>
                <Fluent:RibbonGroupBox Header="Control"
                                       Width="Auto"
                                       Height="Auto"
                                       VerticalAlignment="Top">
                    <Fluent:Button Header="New"
                                   Icon="{DynamicResource plus}"
                                   Command="{Binding g_SessionViewModel.NewSessionCommand}"/>
                    <Fluent:Button Header="Start"
                                   Icon="{DynamicResource start}"
                                   Command="{Binding g_SessionViewModel.StartSessionCommand}"/>
                    <Fluent:Button Header="Stop All"
                                   Icon="{DynamicResource stop}"
                                   Command="{Binding g_SessionViewModel.StopAllSessionsCommand}"/>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Tools"
                                       Width="Auto"
                                       Height="Auto"
                                       VerticalAlignment="Top">
                    <Fluent:Button Header="Preview"
                                   Icon="{DynamicResource bulletlist}"
                                   Command="{Binding g_SessionFormViewModel.ShowFormPreviewCommand}"/>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>
            <Fluent:RibbonTabItem Header="Insights" Name="InsightsTab">
                <Fluent:RibbonGroupBox Header="Actions" 
                                       Width="Auto"
                                       Height="Auto"
                                       VerticalAlignment="Top">
                    <Fluent:Button Header="Reinitialize"
                                   Icon="{DynamicResource refresh}"
                                   Command="{Binding g_InsightsViewModel.ReinitializeCommand,ValidatesOnNotifyDataErrors=False}"/>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Topic" 
                                       Width="Auto"
                                       Height="Auto"
                                       VerticalAlignment="Top">
                    <Fluent:ToggleButton Header="General"
                        Name="GeneralToggleButton"
                        Icon="{DynamicResource user-avatar}"
                        GroupName="TopicGroup"
                        IsChecked="{Binding g_InsightsViewModel.Topic,Converter={StaticResource ChatTopicToBool}, ConverterParameter=General,ValidatesOnNotifyDataErrors=False}"
                        Command="{Binding g_InsightsViewModel.SetChatTopicCommand,ValidatesOnNotifyDataErrors=False}"
                        CommandParameter="{x:Static vm:InsightsViewModel+ChatTopic.General}"/>
                    <Fluent:ToggleButton Header="Manifests"
                        Name="ManifestsToggleButton"
                        Icon="{DynamicResource provdb}"
                        GroupName="TopicGroup"
                        IsChecked="{Binding g_InsightsViewModel.Topic,Converter={StaticResource ChatTopicToBool}, ConverterParameter=Manifests,ValidatesOnNotifyDataErrors=False}"
                        Command="{Binding g_InsightsViewModel.SetChatTopicCommand,ValidatesOnNotifyDataErrors=False}"
                        CommandParameter="{x:Static vm:InsightsViewModel+ChatTopic.Manifests}"/>
                    <Fluent:ToggleButton Header="Data"
                        Name="DataToggleButton"
                        Icon="{DynamicResource datadb}"
                        GroupName="TopicGroup"
                        IsChecked="{Binding g_InsightsViewModel.Topic,Converter={StaticResource ChatTopicToBool}, ConverterParameter=EventData,ValidatesOnNotifyDataErrors=False}"
                        Command="{Binding g_InsightsViewModel.SetChatTopicCommand,ValidatesOnNotifyDataErrors=False}"
                        CommandParameter="{x:Static vm:InsightsViewModel+ChatTopic.EventData}"/>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox Header="Model Input" 
                                       Width="Auto"
                                       Height="Auto"
                                       VerticalAlignment="Top">
                    <Fluent:DropDownButton Header="Import"
                        Width="Auto"
                        Icon="{DynamicResource plus}"
                        IsEnabled="{Binding g_InsightsViewModel.VecDbCommandsAllowed,ValidatesOnNotifyDataErrors=False}">
                        <Fluent:Button
                            Header="From XML file..."
                            Width="Auto"
                            Command="{Binding g_InsightsViewModel.ImportVectorDbDataCommand,ValidatesOnNotifyDataErrors=False}"
                            CommandParameter="{x:Static vm:InsightsViewModel+DataSource.XMLFile}"/>
                        <Fluent:Button
                            Header="From JSON file..."
                            Width="Auto"
                            Command="{Binding g_InsightsViewModel.ImportVectorDbDataCommand,ValidatesOnNotifyDataErrors=False}"
                            CommandParameter="{x:Static vm:InsightsViewModel+DataSource.JSONFile}"/>
                        <Fluent:Button
                            Header="Live..."
                            Width="Auto"
                            Command="{Binding g_InsightsViewModel.ImportVectorDbDataCommand,ValidatesOnNotifyDataErrors=False}"
                            CommandParameter="{x:Static vm:InsightsViewModel+DataSource.Live}"/>
                    </Fluent:DropDownButton>
                    <Fluent:Button
                        Header="Restore"
                        Width="Auto"
                        Icon="{DynamicResource open}"
                        Command="{Binding g_InsightsViewModel.RestoreVectorDbCollectionCommand,ValidatesOnNotifyDataErrors=False}"/>
                    <Fluent:Button
                        Header="Save"
                        Width="Auto"
                        Icon="{DynamicResource diskette}"
                        Command="{Binding g_InsightsViewModel.SaveVectorDbCollectionCommand,ValidatesOnNotifyDataErrors=False}"/>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>

            <!--Contextual Tab Groups-->
            <Fluent:Ribbon.ContextualGroups>
                <Fluent:RibbonContextualTabGroup 
                    Name="manifestsContextualTabGroup"
                    Header="Provider Manifests" 
                    Visibility="{Binding g_MainWindowViewModel.ProviderManifestVisible}"
                    Background="Green" 
                    Width="Auto"
                    MinWidth="125"
                    BorderBrush="Green"/>
                <Fluent:RibbonContextualTabGroup
                    Name="sessionsContextualTabGroup"
                    Header="Live Trace Sessions" 
                    Width="Auto"
                    HorizontalAlignment="Left"
                    Visibility="{Binding g_MainWindowViewModel.LiveSessionsVisible}"
                    Background="Red" 
                    BorderBrush="Red"/>
            </Fluent:Ribbon.ContextualGroups>

        </Fluent:Ribbon>

        <!-- PROGRESS STATUSBAR -->
        <StatusBar Name="MainWindowStatusBar"
                   Background="DodgerBlue"
                   DockPanel.Dock="Bottom">
            <!-- progress text -->
            <StatusBarItem HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
                <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center">
                    <Run Text="{Binding CurrentViewModel.ProgressState.StatusText}"
                         Foreground="White"/>
                </TextBlock>
            </StatusBarItem>
            <!-- separator and ephemeral status text -->
            <StatusBarItem Visibility="{Binding CurrentViewModel.ProgressState.EphemeralStatusText, Converter={StaticResource StringNullOrEmptyToVisibilityConverter}}">
                <Fluent:GroupSeparatorMenuItem DockPanel.Dock="Left"
                        Width="2"
                        Height="25"
                        Background="Black"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Stretch"
                           HorizontalContentAlignment="Stretch"
                            Visibility="{Binding CurrentViewModel.ProgressState.EphemeralStatusText, Converter={StaticResource StringNullOrEmptyToVisibilityConverter}}">
                <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center">
                    <Run Text="{Binding CurrentViewModel.ProgressState.EphemeralStatusText}"
                         Foreground="White"/>
                </TextBlock>
            </StatusBarItem>
            <!-- follow up action button -->
            <StatusBarItem HorizontalAlignment="Left">
                <Button DockPanel.Dock="Left"
                        Background="Gray"
                        BorderBrush="White"
                        Foreground="White"
                        BorderThickness="2"
                        Content="{Binding CurrentViewModel.ProgressState.FollowupActionTitle}"
                        Name="FollowupActionButton"
                        Command="{Binding CurrentViewModel.ProgressState.ExecuteFollowupActionCommand}"
                        HorizontalAlignment="Left"
                        FontSize="10"
                        VerticalAlignment="Top"
                        Visibility="{Binding CurrentViewModel.ProgressState.FollowupActionVisibility}"
                        Height="20"/>
            </StatusBarItem>
            <!-- cancel command button -->
            <StatusBarItem HorizontalAlignment="Left"
               Visibility="{Binding CurrentViewModel.ProgressState.CancelCommandButtonVisibility}">
                <Button DockPanel.Dock="Left"
                        Background="Gray"
                        BorderBrush="White"
                        BorderThickness="2"
                        Content="Cancel"
                        Name="CancelCurrentCommandButton"
                        Command="{Binding CurrentViewModel.ProgressState.CancelCurrentCommandCommand}"                      
                        HorizontalAlignment="Left"
                        FontSize="10"
                        VerticalAlignment="Top"
                        Visibility="{Binding CurrentViewModel.ProgressState.CancelCommandButtonVisibility}"
                        Height="20"/>
            </StatusBarItem>
            <!-- settings status text -->
            <StatusBarItem HorizontalAlignment="Right" DockPanel.Dock="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock>
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Settings.Valid}" Value="False">
                                        <Setter Property="Text" Value="Settings error" />
                                        <Setter Property="Background" Value="Red"/>
                                        <Setter Property="Foreground" Value="White"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Settings.Valid}" Value="True">
                                        <Setter Property="Text" Value="Settings OK" />
                                        <Setter Property="Background" Value="Green"/>
                                        <Setter Property="Foreground" Value="White"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </StatusBarItem>
            <!-- isAdmin status text -->
            <StatusBarItem HorizontalAlignment="Right" DockPanel.Dock="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock>
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsAdmin}" Value="True">
                                        <Setter Property="Text" Value="Admin User" />
                                        <Setter Property="Background" Value="Green"/>
                                        <Setter Property="Foreground" Value="White"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsAdmin}" Value="False">
                                        <Setter Property="Text" Value="Non-Admin User" />
                                        <Setter Property="Background" Value="Red"/>
                                        <Setter Property="Foreground" Value="White"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </StatusBarItem>
            <!-- progress bar indicator -->
            <StatusBarItem HorizontalAlignment="Right" DockPanel.Dock="Right">
                <StackPanel Orientation="Horizontal">
                    <ProgressBar Minimum="0"
                                 Maximum="{Binding CurrentViewModel.ProgressState.ProgressMax}"
                                 Value="{Binding CurrentViewModel.ProgressState.ProgressValue}"
                                 VerticalAlignment="Top"
                                 HorizontalAlignment="Left"
                                 Visibility="{Binding CurrentViewModel.ProgressState.Visible}"
                                 Width="125"
                                 Height="20"/>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
        <ContentControl Name="MainContentControl"
                        Content="{Binding CurrentViewModel,ValidatesOnNotifyDataErrors=False}"/>
        
    </DockPanel>
    <!-- end main content -->
        
    <!-- Overlay panel -->
    <Grid x:Name="Overlay" Background="#80000000" Visibility="{Binding InteractionBlockerVisibility}">
        <Border Background="Transparent" />
        <TextBlock Text="Please wait..." 
                    HorizontalAlignment="Center" 
                    VerticalAlignment="Center" 
                    FontSize="24" 
                    Foreground="White"/>
    </Grid>
    </Grid>
</Fluent:RibbonWindow>