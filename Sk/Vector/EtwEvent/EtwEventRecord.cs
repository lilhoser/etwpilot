/* 
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
using etwlib;
using Microsoft.Extensions.VectorData;
using Microsoft.SemanticKernel.Embeddings;
using Newtonsoft.Json;
using Qdrant.Client.Grpc;

//
// Remove supression after SK vector store is out of alpha
//
#pragma warning disable SKEXP0001
#pragma warning disable SKEXP0020

namespace EtwPilot.Sk.Vector.EtwEvent
{
    using static Utilities.TraceLogger;

    internal class EtwEventRecord
    {
        public Guid Id { get; set; }
        public ParsedEtwEvent Event{ get; set; }
        public string Description { get; set; }
        public ReadOnlyMemory<float> DescriptionEmbedding { get; set; }

        public EtwEventRecord()
        {
            Id = Guid.NewGuid();
            Event = new ParsedEtwEvent();
            DescriptionEmbedding = new ReadOnlyMemory<float>();
            Description = string.Empty;
        }

        public static async Task<EtwEventRecord> CreateFromParsedEtwEvent(
            ParsedEtwEvent Event,
            ITextEmbeddingGenerationService EmbeddingService
            )
        {
            var record = new EtwEventRecord()
            {
                Event = Event,
            };

            record.Description = $@"This ETW event with ID {Event.EventId} (version {Event.Version}) " +
                $"generated by provider {Event.Provider} relates to the process with ID " +
                $"{Event.ProcessId}, start key {Event.ProcessStartKey}, thread ID {Event.ThreadId} " +
                $" from the user with SID {Event.UserSid} at timestamp {Event.Timestamp}. The event " +
                $" logs {Event.Level}-type info about channel {Event.Channel}, task {Event.Task}, " +
                $" and opcode {Event.Opcode} pertaining to keywords {Event.Keywords}. It relates " +
                $" to other ETW events with activity ID {Event.ActivityId}.";
            if (Event.TemplateData != null)
            {
                record.Description += " Additional data included with this event: ";
                Event.TemplateData.ForEach(t => record.Description += $"{t.Name}={t.Value},");
            }

            var embeddingResult = await EmbeddingService.GenerateEmbeddingAsync(record.Description);
            record.DescriptionEmbedding = embeddingResult.ToArray();
            return record;
        }

        public static EtwEventRecord CreateFromQdrantPointStruct(PointStruct Ps)
        {
            try
            {
                var record = new EtwEventRecord()
                {
                    Id = new Guid(Ps.Id.Uuid),
                    Description = Ps.Payload["Description"].StringValue
                };
                record.Event = JsonConvert.DeserializeObject<ParsedEtwEvent>(
                    Ps.Payload["EventJson"].StringValue)!;
                return record;
            }
            catch (Exception ex)
            {
                Trace(TraceLoggerType.Vector,
                      System.Diagnostics.TraceEventType.Error,
                      $"CreateFromQdrantPointStruct: {ex.Message}");
                return new EtwEventRecord();
            }
        }
    }

    internal class EtwEventRecordMapper : IVectorStoreRecordMapper<EtwEventRecord, PointStruct>
    {
        public PointStruct MapFromDataToStorageModel(EtwEventRecord Record)
        {
            try
            {
                var json = JsonConvert.SerializeObject(Record.Event);
                var ps = new PointStruct
                {
                    Id = new PointId { Uuid = Record.Id.ToString() },
                    Vectors = new Vectors() { },
                    Payload = {
                        { "EventJson", json },
                        { "Description", Record.Description },
                    },
                };
                var namedVectors = new NamedVectors();
                namedVectors.Vectors.Add("DescriptionEmbedding", Record.DescriptionEmbedding.ToArray());
                ps.Vectors.Vectors_ = namedVectors;
                return ps;
            }
            catch (Exception ex)
            {
                Trace(TraceLoggerType.Vector,
                      System.Diagnostics.TraceEventType.Error,
                      $"MapFromDataToStorageModel: {ex.Message}");
                return new PointStruct();
            }
        }

        public EtwEventRecord MapFromStorageToDataModel(PointStruct Ps, StorageToDataModelMapperOptions Options)
        {
            return EtwEventRecord.CreateFromQdrantPointStruct(Ps);
        }
    }
}
